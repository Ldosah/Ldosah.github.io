<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://ldosah.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 May 2022 16:29:05 +0800</lastBuildDate>
    
        <atom:link href="https://ldosah.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Day2</title>
      <link>https://ldosah.github.io/posts/day2/</link>
      <pubDate>Sun, 01 May 2022 16:29:05 +0800</pubDate>
      
      <guid>https://ldosah.github.io/posts/day2/</guid>
      <description>第四章 实战入门 本章节将介绍如何在kubernetes集群中部署一个nginx服务，并且能够对其进行访问。
Namespace ​ Namespace是kubernetes系统中的一种非常重要资源，它的主要作用是用来实现多套环境的资源隔离或者多租户的资源隔离。
​ 默认情况下，kubernetes集群中的所有的Pod都是可以相互访问的。但是在实际中，可能不想让两个Pod之间进行互相的访问，那此时就可以将两个Pod划分到不同的namespace下。kubernetes通过将集群内部的资源分配到不同的Namespace中，可以形成逻辑上的&amp;quot;组&amp;quot;，以方便不同的组的资源进行隔离使用和管理。
​ 可以通过kubernetes的授权机制，将不同的namespace交给不同租户进行管理，这样就实现了多租户的资源隔离。此时还能结合kubernetes的资源配额机制，限定不同租户能占用的资源，例如CPU使用量、内存使用量等等，来实现租户可用资源的管理。
kubernetes在集群启动之后，会默认创建几个namespace
[root@master ~]# kubectl get namespace NAME STATUS AGE default Active 45h # 所有未指定Namespace的对象都会被分配在default命名空间 kube-node-lease Active 45h # 集群节点之间的心跳维护，v1.13开始引入 kube-public Active 45h # 此命名空间下的资源可以被所有人访问（包括未认证用户） kube-system Active 45h # 所有由Kubernetes系统创建的资源都处于这个命名空间 下面来看namespace资源的具体操作：
查看
# 1 查看所有的ns 命令：kubectl get ns [root@master ~]# kubectl get ns NAME STATUS AGE default Active 45h kube-node-lease Active 45h kube-public Active 45h kube-system Active 45h  # 2 查看指定的ns 命令：kubectl get ns ns名称 [root@master ~]# kubectl get ns default NAME STATUS AGE default Active 45h  # 3 指定输出格式 命令：kubectl get ns ns名称 -o 格式参数 # kubernetes支持的格式有很多，比较常见的是wide、json、yaml [root@master ~]# kubectl get ns default -o yaml apiVersion: v1 kind: Namespace metadata:  creationTimestamp: &amp;#34;2020-04-05T04:44:16Z&amp;#34;  name: default  resourceVersion: &amp;#34;151&amp;#34;  selfLink: /api/v1/namespaces/default  uid: 7405f73a-e486-43d4-9db6-145f1409f090 spec:  finalizers:  - kubernetes status:  phase: Active  # 4 查看ns详情 命令：kubectl describe ns ns名称 [root@master ~]# kubectl describe ns default Name: default Labels: &amp;lt;none&amp;gt; Annotations: &amp;lt;none&amp;gt; Status: Active # Active 命名空间正在使用中 Terminating 正在删除命名空间  # ResourceQuota 针对namespace做的资源限制 # LimitRange针对namespace中的每个组件做的资源限制 No resource quota.</description>
    </item>
    
    <item>
      <title>First</title>
      <link>https://ldosah.github.io/posts/first/</link>
      <pubDate>Sun, 01 May 2022 15:43:47 +0800</pubDate>
      
      <guid>https://ldosah.github.io/posts/first/</guid>
      <description>hello, this is my first post.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ldosah.github.io/posts/kubernetes%E7%AC%AC1%E5%A4%A9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ldosah.github.io/posts/kubernetes%E7%AC%AC1%E5%A4%A9/</guid>
      <description>第一章 kubernetes介绍 本章节主要介绍应用程序在服务器上部署方式演变以及kubernetes的概念、组件和工作原理。
应用部署方式演变 在部署应用程序的方式上，主要经历了三个时代：
  传统部署：互联网早期，会直接将应用程序部署在物理机上
 优点：简单，不需要其它技术的参与
缺点：不能为应用程序定义资源使用边界，很难合理地分配计算资源，而且程序之间容易产生影响
   虚拟化部署：可以在一台物理机上运行多个虚拟机，每个虚拟机都是独立的一个环境
 优点：程序环境不会相互产生影响，提供了一定程度的安全性
缺点：增加了操作系统，浪费了部分资源
   容器化部署：与虚拟化类似，但是共享了操作系统
 优点：
​ 可以保证每个容器拥有自己的文件系统、CPU、内存、进程空间等
​ 运行应用程序所需要的资源都被容器包装，并和底层基础架构解耦
​ 容器化的应用程序可以跨云服务商、跨Linux操作系统发行版进行部署
   容器化部署方式给带来很多的便利，但是也会出现一些问题，比如说：
 一个容器故障停机了，怎么样让另外一个容器立刻启动去替补停机的容器 当并发访问量变大的时候，怎么样做到横向扩展容器数量  这些容器管理的问题统称为容器编排问题，为了解决这些容器编排问题，就产生了一些容器编排的软件：
 Swarm：Docker自己的容器编排工具 Mesos：Apache的一个资源统一管控的工具，需要和Marathon结合使用 Kubernetes：Google开源的的容器编排工具  kubernetes简介 ​
​ kubernetes，是一个全新的基于容器技术的分布式架构领先方案，是谷歌严格保密十几年的秘密武器&amp;mdash;-Borg系统的一个开源版本，于2014年9月发布第一个版本，2015年7月发布第一个正式版本。
​ kubernetes的本质是一组服务器集群，它可以在集群的每个节点上运行特定的程序，来对节点中的容器进行管理。目的是实现资源管理的自动化，主要提供了如下的主要功能：
 自我修复：一旦某一个容器崩溃，能够在1秒中左右迅速启动新的容器 弹性伸缩：可以根据需要，自动对集群中正在运行的容器数量进行调整 服务发现：服务可以通过自动发现的形式找到它所依赖的服务 负载均衡：如果一个服务起动了多个容器，能够自动实现请求的负载均衡 版本回退：如果发现新发布的程序版本有问题，可以立即回退到原来的版本 存储编排：可以根据容器自身的需求自动创建存储卷  kubernetes组件 一个kubernetes集群主要是由控制节点(master)、**工作节点(node)**构成，每个节点上都会安装不同的组件。
master：集群的控制平面，负责集群的决策 ( 管理 )
 ApiServer : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制
Scheduler : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上</description>
    </item>
    
  </channel>
</rss>
